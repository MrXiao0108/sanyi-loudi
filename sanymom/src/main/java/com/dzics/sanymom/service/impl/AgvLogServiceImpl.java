package com.dzics.sanymom.service.impl;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.dzics.common.model.entity.LogPromptMsg;import com.dzics.common.model.entity.LogPromptMsgMom;import com.dzics.common.model.response.Result;import com.dzics.common.service.LogPromptMsgMomService;import com.dzics.common.util.PageLimitBase;import com.dzics.sanymom.service.AgvLogAbs;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;/** * @author ZhangChengJun * Date 2022/1/13. * @since */@Service@Slf4jpublic class AgvLogServiceImpl extends AgvLogAbs {    @Autowired    private MomLogPromptMsgImpl logPromptMsgService;    @Autowired    private LogPromptMsgMomService logPromptMsgMomService;    @Value("${order.code}")    private String orderCodeSys;    @Override    public Result getLogPropMsg(PageLimitBase pageLimitBase) {        PageHelper.startPage(pageLimitBase.getPage(), pageLimitBase.getLimit());        QueryWrapper<LogPromptMsg> wp = new QueryWrapper<>();        wp.eq("order_no", orderCodeSys);        wp.eq("create_date",String.valueOf(new SimpleDateFormat("yyyy-MM-dd").format(new Date())));        wp.eq("invok_status","N");        wp.eq("handle",0);        wp.eq("del_flag",0);        if (!StringUtils.isEmpty(pageLimitBase.getType()) && !StringUtils.isEmpty(pageLimitBase.getField())) {            String type = pageLimitBase.getType().toUpperCase();            String field = pageLimitBase.getField();            if ("ASC".equals(type)) {                wp.orderByAsc(field);            } else {                wp.orderByDesc(field);            }        }else {            wp.orderByDesc("start_time");        }        List<LogPromptMsg> list = logPromptMsgService.list(wp);        PageInfo<LogPromptMsg> info = new PageInfo<>(list);        return Result.ok(info.getList(), info.getTotal());    }    @Override    public Result getLogPropMsgMom(String groupId, PageLimitBase pageLimitBase) {        PageHelper.startPage(pageLimitBase.getPage(), pageLimitBase.getLimit());        QueryWrapper<LogPromptMsgMom> wp = new QueryWrapper<>();        wp.eq("group_id",groupId);        if (!StringUtils.isEmpty(pageLimitBase.getType()) && !StringUtils.isEmpty(pageLimitBase.getField())) {            String type = pageLimitBase.getType().toUpperCase();            String field = pageLimitBase.getField();            if ("ASC".equals(type)) {                wp.orderByAsc(field);            } else {                wp.orderByDesc(field);            }        }else {            wp.orderByDesc("start_time");        }        List<LogPromptMsgMom> list = logPromptMsgMomService.list(wp);        PageInfo<LogPromptMsgMom> info = new PageInfo<>(list);        return Result.ok(info.getList(), info.getTotal());    }}